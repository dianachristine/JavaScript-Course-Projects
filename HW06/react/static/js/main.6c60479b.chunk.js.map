{"version":3,"sources":["components/Alert.tsx","components/Footer.tsx","context/AppContext.tsx","components/Header.tsx","configuration.ts","services/base-service.ts","types/EPageStatus.ts","containers/todo-categories/TodoCategoryCreate.tsx","components/Loader.tsx","containers/todo-categories/TodoCategoryDelete.tsx","containers/todo-categories/TodoCategoryDetails.tsx","containers/todo-categories/TodoCategoryEdit.tsx","containers/todo-categories/TodoCategoryIndex.tsx","containers/todo-priorities/TodoPriorityCreate.tsx","containers/todo-priorities/TodoPriorityDelete.tsx","containers/todo-priorities/TodoPriorityDetails.tsx","containers/todo-priorities/TodoPriorityEdit.tsx","containers/todo-priorities/TodoPriorityIndex.tsx","containers/todo-tasks/TodoTaskCreate.tsx","containers/todo-tasks/TodoTaskDelete.tsx","containers/todo-tasks/TodoTaskDetails.tsx","containers/todo-tasks/TodoTaskEdit.tsx","containers/todo-tasks/TodoTaskIndex.tsx","containers/home/HomeIndex.tsx","services/identity-service.tsx","containers/identity/Login.tsx","containers/identity/Register.tsx","containers/Page404.tsx","App.tsx","index.tsx"],"names":["EAlertClass","Footer","className","initialAppState","token","firstName","lastName","setAuthInfo","AppContext","React","createContext","AppContextProvider","Provider","Header","Consumer","appState","useContext","history","useHistory","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","e","preventDefault","replace","ApiBaseUrl","BaseService","headers","Pragma","Expires","Authorization","apiEndpoint","this","axios","get","getAxiosConfiguration","response","ok","status","statusCode","data","error","messages","id","delete","entity","post","put","Axios","create","baseURL","EPageStatus","Alert","props","show","alertClass","role","message","TodoCategoryCreate","useState","categoryName","categorySort","categoryData","setCategoryData","alertMessage","setAlertMessage","createClicked","a","objToSave","Number","onSubmit","nativeEvent","Danger","htmlFor","value","onChange","target","name","Loader","pageStatus","Loading","Error","TodoCategoryDelete","useParams","todoCategory","setTodoCategory","setPageStatus","loadData","result","OK","useEffect","deleteClicked","TodoCategoryDetails","TodoCategoryEdit","saveClicked","RowDisplay","TodoCategoryIndex","todoCategories","setTodoCategories","getAll","map","TodoPriorityCreate","priorityName","prioritySort","priorityData","setPriorityData","TodoPriorityDelete","todoPriority","setTodoPriority","TodoPriorityDetails","TodoPriorityEdit","TodoPriorityIndex","todoPriorities","setTodoPriorities","TodoTaskCreate","taskName","taskSort","todoCategoryId","todoPriorityId","taskData","setTaskData","isCompleted","categoryResult","priorityResult","selected","disabled","category","priority","TodoTaskDelete","todoTask","setTodoTask","taskResult","TodoTaskDetails","TodoTaskEdit","checked","ChangeTodoTaskIsComplete","todoCategoryName","todoPriorityName","console","log","TodoTaskIndex","todoTasks","setTodoTasks","todoTasksList","setCategoryAndPriorityNameForTask","task","Promise","all","HomeIndex","IdentityService","loginData","loginDataJson","JSON","stringify","Login","email","password","setLoginData","logInClicked","placeholder","autoComplete","Register","registerClicked","Page404","App","setAppState","exact","path","component","ReactDOM","render","basename","process","StrictMode","document","getElementById"],"mappings":"2JAAYA,E,6DCUGC,EAVA,WACX,OACI,wBAAQC,UAAU,+BAAlB,SACI,qBAAKA,UAAU,YAAf,sC,OCMCC,EAA8B,CACvCC,MAAO,KACPC,UAAW,GACXC,SAAU,GACVC,YAAa,SAACH,EAAsBC,EAAmBC,MAG9CE,EAAaC,IAAMC,cAAyBP,GAC5CQ,EAAqBH,EAAWI,SCkF9BC,GDjFmBL,EAAWM,SCb9B,WACX,IAAMC,EAAWC,qBAAWR,GAEtBS,EAAUC,cAEhB,OACI,iCACI,qBAAKhB,UAAU,uGAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAAC,IAAD,CAASA,UAAU,eAAeiB,GAAG,IAArC,uBAGA,wBACIjB,UAAU,iBACVkB,KAAK,SACLC,cAAY,WACZC,cAAY,mBACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,oBAPf,SASI,sBAAMvB,UAAU,0BAEpB,sBAAKA,UAAU,oEAAf,UACI,oBAAIA,UAAU,yBAAd,SACwB,OAAnBa,EAASX,MACN,6BAEA,qCACK,IACD,oBAAIF,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,qBAAqBiB,GAAG,aAA3C,0BAIJ,oBAAIjB,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,qBAAqBiB,GAAG,kBAA3C,+BAIJ,oBAAIjB,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,qBAAqBiB,GAAG,kBAA3C,+BAGE,SAIlB,oBAAIjB,UAAU,aAAd,SACwB,OAAnBa,EAASX,MACN,qCACI,oBAAIF,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,sBAAsBiB,GAAG,qBAA5C,wBAIJ,oBAAIjB,UAAU,WAAd,SACI,cAAC,IAAD,CAASA,UAAU,sBAAsBiB,GAAG,kBAA5C,wBAMR,qCACI,oBAAIjB,UAAU,WAAd,SACI,sBAAMA,UAAU,qBAAhB,SACKa,EAASV,UAAY,IAAMU,EAAST,aAG7C,oBAAIJ,UAAU,WAAd,SAEI,wBACIwB,QAAS,SAACC,GAEFA,EAAEC,iBACFb,EAASR,YAAY,KAAM,GAAI,IAC/BU,EAAQY,QAAQ,MAGxB3B,UAAU,mCARd,uC,sDC5E3B4B,EAAa,oCCKJC,EAAtB,0GAQI,SAAuC3B,GACnC,GAAKA,EASL,MARmC,CAC/B4B,QAAS,CACL,gBAAiB,WACjBC,OAAQ,WACRC,QAAS,IACTC,cAAe,UAAY/B,MAf3C,2DAqBI,WAA6BgC,EAAqBhC,GAAlD,wGAE6BiC,KAAKC,MAAMC,IAAeH,EAAaL,EAAYS,sBAAsBpC,IAFtG,cAEYqC,EAFZ,yBAGe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAN3B,uCAUYC,EAVZ,uBAWe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAd1D,yDArBJ,iHAwCI,WAA0BX,EAAqBY,EAAY5C,GAA3D,+FAEQgC,GAA4BY,EAFpC,SAG6BX,KAAKC,MAAMC,IAAaH,EAAaL,EAAYS,sBAAsBpC,IAHpG,cAGYqC,EAHZ,yBAIe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAP3B,uCAWYC,EAXZ,uBAYe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAf1D,yDAxCJ,sHA4DI,WAA6BX,EAAqBY,EAAY5C,GAA9D,+FAEQgC,GAA4BY,EAFpC,SAI6BX,KAAKC,MAAMW,OAAgBb,EAAaL,EAAYS,sBAAsBpC,IAJvG,cAIYqC,EAJZ,yBAKe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,SAPjC,uCAWYG,EAXZ,uBAYe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAf1D,yDA5DJ,oHAgFI,WAA2BX,EAAqBc,EAAiB9C,GAAjE,wGAE6BiC,KAAKC,MAAMa,KAAcf,EAAac,EAAQnB,EAAYS,sBAAsBpC,IAF7G,cAEYqC,EAFZ,yBAGe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAN3B,uCAUYC,EAVZ,uBAWe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAd1D,yDAhFJ,mHAmGI,WAA0BX,EAAqBY,EAAYE,EAAiB9C,GAA5E,+FAEQgC,GAA4BY,EAFpC,SAI6BX,KAAKC,MAAMc,IAAahB,EAAac,EAAQnB,EAAYS,sBAAsBpC,IAJ5G,cAIYqC,EAJZ,yBAKe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAR3B,uCAYYC,EAZZ,uBAae,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAhB1D,yDAnGJ,oEAAsBhB,EACDO,MAAQe,IAAMC,OAAO,CAClCC,QAASzB,EACTE,QAAS,CACL,eAAgB,sB,SLThBhC,K,wBAAAA,E,4BAAAA,E,wBAAAA,E,sBAAAA,E,wBAAAA,E,kBAAAA,E,oBAAAA,E,mBAAAA,M,KAWZ,IMXYwD,ENgBGC,EALD,SAACC,GAEX,OAAOA,EAAMC,KAAO,qBAAKzD,UAAW,SAAWwD,EAAME,WAAYC,KAAK,QAAlD,SAA2DH,EAAMI,UAAiB,MO4E3FC,EAjFY,WACvB,IAAMhD,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,CAAEC,aAAc,GAAIC,aAAc,KAAnF,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEVqD,EAAa,uCAAG,WAAO5C,GAAP,eAAA6C,EAAA,yDAClB7C,EAAEC,iBACgC,KAA9BuC,EAAaF,cAAqD,KAA9BE,EAAaD,aAFnC,gBAGdI,EAAgB,yCAHF,8BAKRG,EAA2B,CAC7BR,aAAcE,EAAaF,aAC3BC,aAAcQ,OAAOP,EAAaD,eAPxB,SAUKnC,EAAYoB,KAAoB,mBAAoBsB,EAAW1D,EAASX,OAV7E,cAWHsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,oBAEhByC,EAAgB,IAfN,4CAAH,sDAqBnB,OACI,mCACI,sBAAMK,SAAU,SAAChD,GAAD,OAAO4C,EAAc5C,EAAEiD,cAAvC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,wCACA,+CACI,oCACI,uBACA,cAAC,EAAD,CAAOyD,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOZ,EAAaF,aACpBe,SAAU,SAACrD,GAAD,OAAOyC,EAAgB,2BAAKD,GAAN,IAAoBF,aAActC,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOZ,EAAaD,aACpBc,SAAU,SAACrD,GAAD,OAAOyC,EAAgB,2BAAKD,GAAN,IAAoBD,aAAcvC,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,qBAAKhF,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAO4C,EAAc5C,EAAEiD,cAChCxD,KAAK,SACLlB,UAAU,kBAHd,qC,SDzEpBsD,K,qBAAAA,E,iBAAAA,E,SAAAA,M,KEEZ,IAUe2B,EAVA,SAACzB,GACZ,OAAIA,EAAM0B,aAAe5B,EAAY6B,QAC1B,qBAAKnF,UAAU,wBAAwB2D,KAAK,QAA5C,wBAEPH,EAAM0B,aAAe5B,EAAY8B,MAC1B,sBAAKpF,UAAU,qBAAqB2D,KAAK,QAAzC,sBAA2DH,EAAMd,cAErE,8BC0EI2C,EAxEY,WACvB,IAAQvC,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KAEA,EAAoC1B,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEM1E,EAAUC,cAEV0E,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD8C,EAAgBG,EAAOhD,OAEvB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAWdmD,qBAAU,WACNH,MACD,IAEH,IAAMI,EAAa,uCAAG,WAAOrE,GAAP,eAAA6C,EAAA,sEACCzC,EAAYkB,OAAsB,mBAAoBD,EAAIjC,EAASX,OADpE,QACdyF,EADc,QAGPnD,IACPiD,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD3B,EAAQY,QAAQ,oBAEhB8D,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPpD,2CAAH,sDAWnB,OACI,qCACI,cAAC,EAAD,eAAYwC,IACZ,4DAEA,gCACI,yCACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAaxB,eACvC,oBAAI/D,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAavB,qBAI/C,uBAEA,qBAAKhE,UAAU,aAAf,SACI,wBAAQwB,QAAS,SAACC,GAAD,OAAOqE,EAAcrE,EAAEiD,cAAcxD,KAAK,SAASlB,UAAU,iBAA9E,2BAIJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,kBAAmBjB,UAAU,iBAAvC,oCChBD+F,EAjDa,WACxB,IAAQjD,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KAEA,EAAoC1B,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEMC,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD8C,EAAgBG,EAAOhD,OAEvB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAed,OAJAmD,qBAAU,WACNH,MACD,IAGC,qCACI,cAAC,EAAD,eAAYR,IACZ,yCAEA,gCACI,+CACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAaxB,eACvC,oBAAI/D,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAavB,qBAI/C,8BACG,cAAC,IAAD,CAAM/C,GAAI,kBAAmBjB,UAAU,iBAAvC,gCC2DAgG,EArGU,WACrB,IAAOlD,EAAMwC,cAANxC,GAEDjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEhB,EAAwC8C,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KAEMS,EAAW,uCAAG,WAAOxE,GAAP,eAAA6C,EAAA,yDAChB7C,EAAEC,iBACgC,KAA9B6D,EAAaxB,cAAqD,IAA9BwB,EAAavB,aAFrC,gBAGZI,EAAgB,yCAHJ,8BAKNG,EAA2B,CAC7BzB,GAAIA,EACJiB,aAAcwB,EAAaxB,aAC3BC,aAAcQ,OAAOe,EAAavB,eAR1B,SAWOnC,EAAYqB,IAAmB,mBAAoBJ,EAAIyB,EAAW1D,EAASX,OAXlF,cAYDsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,oBAEhByC,EAAgB,IAhBR,4CAAH,sDAqBXsB,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAEFnD,IAAMmD,EAAOhD,MACpB6C,EAAgBG,EAAOhD,MAHd,2CAAH,qDAYd,OALAkD,qBAAU,WACNH,MACD,IAIC,mCACI,sBAAMjB,SAAU,SAAChD,GAAD,OAAOwE,EAAYxE,EAAEiD,cAArC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,sCACA,+CACA,uCAAU8C,EAAV,OACI,oCACI,uBACA,cAAC,EAAD,CAAOW,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOU,EAAaxB,aACpBe,SAAU,SAACrD,GAAD,OAAO+D,EAAgB,2BAAKD,GAAN,IAAoBxB,aAActC,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOU,EAAavB,aACpBc,SAAU,SAACrD,GAAD,OAAO+D,EAAgB,2BAAKD,GAAN,IAAoBvB,aAAcQ,OAAO/C,EAAEsD,OAAOF,WAClF7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,qBAAKhF,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAOwE,EAAYxE,EAAEiD,cAC9BxD,KAAK,SACLlB,UAAU,kBAHd,oBAQJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,kBAAmBjB,UAAU,iBAAvC,0CC9F1BkG,EAAa,SAAC1C,GAAD,OACf,+BACI,6BAAKA,EAAM+B,aAAaxB,eACxB,6BAAKP,EAAM+B,aAAavB,eACxB,+BACI,cAAC,IAAD,CAAM/C,GAAI,mBAAqBuC,EAAM+B,aAAazC,GAAI9C,UAAU,YAAhE,qBAEQ,IAHZ,IAIM,IACF,cAAC,IAAD,CAAMiB,GAAI,wBAA0BuC,EAAM+B,aAAazC,GAAI9C,UAAU,YAArE,kBAEQ,IAPZ,IAQM,IACF,cAAC,IAAD,CAAMiB,GAAI,0BAA4BuC,EAAM+B,aAAazC,GAAI9C,UAAU,YAAvE,2BAyDGmG,EAlDW,WACtB,IAAMtF,EAAWC,qBAAWR,GAE5B,EAA4CwD,mBAAS,IAArD,mBAAOsC,EAAP,KAAuBC,EAAvB,KAEA,EAAoCvC,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEMC,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYyE,OAAsB,kBAAmBzF,EAASX,OADpE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD2D,EAAkBV,EAAOhD,OAEzB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAed,OAJAmD,qBAAU,WACNH,MACD,IAGC,qCACI,cAAC,EAAD,eAAYR,IACZ,qBAAKlF,UAAU,aAAf,SACI,cAAC,IAAD,CAAMiB,GAAG,0BAA0BjB,UAAU,eAAe2D,KAAK,SAAjE,mCAIJ,uBACA,iDACA,wBAAO3D,UAAU,QAAjB,UACI,gCACI,+BACI,+CACA,+CACA,4BAGR,gCACKoG,EAAeG,KAAI,SAAChB,GAAD,OAChB,cAAC,EAAD,CAAYA,aAAcA,GAAmBA,EAAazC,gBCmBlE0D,EAjFY,WACxB,IAAM3F,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,CAAE2C,aAAc,GAAIC,aAAc,KAAnF,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwC9C,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEVqD,EAAa,uCAAG,WAAO5C,GAAP,eAAA6C,EAAA,yDAClB7C,EAAEC,iBACgC,KAA9BiF,EAAaF,cAAqD,KAA9BE,EAAaD,aAFnC,gBAGdtC,EAAgB,yCAHF,8BAKRG,EAA2B,CAC7BkC,aAAcE,EAAaF,aAC3BC,aAAclC,OAAOmC,EAAaD,eAPxB,SAUK7E,EAAYoB,KAAoB,mBAAoBsB,EAAW1D,EAASX,OAV7E,cAWHsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,oBAEhByC,EAAgB,IAfN,4CAAH,sDAqBnB,OACI,mCACI,sBAAMK,SAAU,SAAChD,GAAD,OAAO4C,EAAc5C,EAAEiD,cAAvC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,wCACA,+CACI,oCACI,uBACA,cAAC,EAAD,CAAOyD,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAO8B,EAAaF,aACpB3B,SAAU,SAACrD,GAAD,OAAOmF,EAAgB,2BAAKD,GAAN,IAAoBF,aAAchF,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAO8B,EAAaD,aACpB5B,SAAU,SAACrD,GAAD,OAAOmF,EAAgB,2BAAKD,GAAN,IAAoBD,aAAcjF,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,qBAAKhF,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAO4C,EAAc5C,EAAEiD,cAChCxD,KAAK,SACLlB,UAAU,kBAHd,oCCUjB6G,EAxEY,WACvB,IAAQ/D,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KAEA,EAAoCjD,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEM1E,EAAUC,cAEV0E,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxDqE,EAAgBpB,EAAOhD,OAEvB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAWdmD,qBAAU,WACNH,MACD,IAEH,IAAMI,EAAa,uCAAG,WAAOrE,GAAP,eAAA6C,EAAA,sEACCzC,EAAYkB,OAAsB,mBAAoBD,EAAIjC,EAASX,OADpE,QACdyF,EADc,QAGPnD,IACPiD,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD3B,EAAQY,QAAQ,oBAEhB8D,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPpD,2CAAH,sDAWnB,OACI,qCACI,cAAC,EAAD,eAAYwC,IACZ,4DAEA,gCACI,yCACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaL,eACvC,oBAAIzG,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaJ,qBAI/C,uBAEA,qBAAK1G,UAAU,aAAf,SACI,wBAAQwB,QAAS,SAACC,GAAD,OAAOqE,EAAcrE,EAAEiD,cAAcxD,KAAK,SAASlB,UAAU,iBAA9E,2BAIJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,kBAAmBjB,UAAU,iBAAvC,oCChBDgH,EAjDa,WACxB,IAAQlE,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KAEA,EAAoCjD,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEMC,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxDqE,EAAgBpB,EAAOhD,OAEvB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAed,OAJAmD,qBAAU,WACNH,MACD,IAGC,qCACI,cAAC,EAAD,eAAYR,IACZ,yCAEA,gCACI,+CACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaL,eACvC,oBAAIzG,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaJ,qBAI/C,8BACG,cAAC,IAAD,CAAMzF,GAAI,kBAAmBjB,UAAU,iBAAvC,gCC2DAiH,EArGU,WACrB,IAAOnE,EAAMwC,cAANxC,GAEDjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEhB,EAAwC8C,mBAAS,IAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KAEMd,EAAW,uCAAG,WAAOxE,GAAP,eAAA6C,EAAA,yDAChB7C,EAAEC,iBACgC,KAA9BoF,EAAaL,cAAqD,IAA9BK,EAAaJ,aAFrC,gBAGZtC,EAAgB,yCAHJ,8BAKNG,EAA2B,CAC7BzB,GAAIA,EACJ2D,aAAcK,EAAaL,aAC3BC,aAAclC,OAAOsC,EAAaJ,eAR1B,SAWO7E,EAAYqB,IAAmB,mBAAoBJ,EAAIyB,EAAW1D,EAASX,OAXlF,cAYDsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,oBAEhByC,EAAgB,IAhBR,4CAAH,sDAqBXsB,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYQ,IAAmB,mBAAoBS,EAAIjC,EAASX,OADtE,QACTyF,EADS,QAEFnD,IAAMmD,EAAOhD,MACpBoE,EAAgBpB,EAAOhD,MAHd,2CAAH,qDAYd,OALAkD,qBAAU,WACNH,MACD,IAIC,mCACI,sBAAMjB,SAAU,SAAChD,GAAD,OAAOwE,EAAYxE,EAAEiD,cAArC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,sCACA,+CACA,uCAAU8C,EAAV,OACI,oCACI,uBACA,cAAC,EAAD,CAAOW,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOiC,EAAaL,aACpB3B,SAAU,SAACrD,GAAD,OAAOsF,EAAgB,2BAAKD,GAAN,IAAoBL,aAAchF,EAAEsD,OAAOF,UAC3E7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,uBACIC,MAAOiC,EAAaJ,aACpB5B,SAAU,SAACrD,GAAD,OAAOsF,EAAgB,2BAAKD,GAAN,IAAoBJ,aAAclC,OAAO/C,EAAEsD,OAAOF,WAClF7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,eACHkC,KAAK,0BAGb,uBACA,qBAAKhF,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAOwE,EAAYxE,EAAEiD,cAC9BxD,KAAK,SACLlB,UAAU,kBAHd,oBAQJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,kBAAmBjB,UAAU,iBAAvC,0CC9F1BkG,EAAa,SAAC1C,GAAD,OACf,+BACI,6BAAKA,EAAMsD,aAAaL,eACxB,6BAAKjD,EAAMsD,aAAaJ,eACxB,+BACI,cAAC,IAAD,CAAMzF,GAAI,mBAAqBuC,EAAMsD,aAAahE,GAAI9C,UAAU,YAAhE,qBAEQ,IAHZ,IAIM,IACF,cAAC,IAAD,CAAMiB,GAAI,wBAA0BuC,EAAMsD,aAAahE,GAAI9C,UAAU,YAArE,kBAEQ,IAPZ,IAQM,IACF,cAAC,IAAD,CAAMiB,GAAI,0BAA4BuC,EAAMsD,aAAahE,GAAI9C,UAAU,YAAvE,2BAyDGkH,EAlDW,WACtB,IAAMrG,EAAWC,qBAAWR,GAE5B,EAA4CwD,mBAAS,IAArD,mBAAOqD,EAAP,KAAuBC,EAAvB,KAEA,EAAoCtD,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEMC,EAAQ,uCAAG,4BAAApB,EAAA,sEACMzC,EAAYyE,OAAsB,kBAAmBzF,EAASX,OADpE,QACTyF,EADS,QAGFnD,IAAMmD,EAAOhD,MACpB8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD0E,EAAkBzB,EAAOhD,OAEzB8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPzD,2CAAH,qDAed,OAJAmD,qBAAU,WACNH,MACD,IAGC,qCACI,cAAC,EAAD,eAAYR,IACZ,qBAAKlF,UAAU,aAAf,SACI,cAAC,IAAD,CAAMiB,GAAG,0BAA0BjB,UAAU,eAAe2D,KAAK,SAAjE,mCAIJ,uBACA,iDACA,wBAAO3D,UAAU,QAAjB,UACI,gCACI,+BACI,+CACA,+CACA,4BAGR,gCACKmH,EAAeZ,KAAI,SAACO,GAAD,OAChB,cAAC,EAAD,CAAYA,aAAcA,GAAmBA,EAAahE,gBCkFnEuE,EA/IQ,WACnB,IAAMxG,EAAWC,qBAAWR,GAE5B,EAA4CwD,mBAAS,IAArD,mBAAOsC,EAAP,KAAuBC,EAAvB,KACA,EAA4CvC,mBAAS,IAArD,mBAAOqD,EAAP,KAAuBC,EAAvB,KAEA,EAAgCtD,mBAAS,CAAEwD,SAAU,GAAIC,SAAU,GAAIC,eAAgB,GAAIC,eAAgB,KAA3G,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwC7D,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEVqD,EAAa,uCAAG,WAAO5C,GAAP,eAAA6C,EAAA,yDAClB7C,EAAEC,iBAEwB,KAAtBgG,EAASJ,UACa,KAAtBI,EAASH,UACmB,KAA5BG,EAASF,gBACmB,KAA5BE,EAASD,eANK,gBAQdrD,EAAgB,iBARF,8BAURG,EAAuB,CACzB+C,SAAUI,EAASJ,SACnBC,SAAU/C,OAAOkD,EAASH,UAC1BC,eAAgBE,EAASF,eACzBC,eAAgBC,EAASD,eACzBG,aAAa,GAfH,SAkBK/F,EAAYoB,KAAgB,cAAesB,EAAW1D,EAASX,OAlBpE,cAmBHsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,eAEhByC,EAAgB,IAvBN,4CAAH,sDA4BbsB,EAAQ,uCAAG,8BAAApB,EAAA,sEACczC,EAAYyE,OAAsB,kBAAmBzF,EAASX,OAD5E,cACT2H,EADS,QAEMrF,IAAMqF,EAAelF,MACpC0D,EAAkBwB,EAAelF,MAHxB,SAMcd,EAAYyE,OAAsB,kBAAmBzF,EAASX,OAN5E,QAMT4H,EANS,QAOMtF,IAAMsF,EAAenF,MACpCyE,EAAkBU,EAAenF,MARxB,2CAAH,qDAgBd,OAJAkD,qBAAU,WACNH,MACD,IAGC,mCACI,sBAAMjB,SAAU,SAAChD,GAAD,OAAO4C,EAAc5C,EAAEiD,cAAvC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACI,wCACA,2CACA,oCACI,uBACA,cAAC,EAAD,CAAOyD,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,WAAf,yBACA,uBACIC,MAAO6C,EAASJ,SAChBxC,SAAU,SAACrD,GAAD,OAAOkG,EAAY,2BAAKD,GAAN,IAAgBJ,SAAU7F,EAAEsD,OAAOF,UAC/D7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,WACHkC,KAAK,sBAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,WAAf,yBACA,uBACIC,MAAO6C,EAASH,SAChBzC,SAAU,SAACrD,GAAD,OAAOkG,EAAY,2BAAKD,GAAN,IAAgBH,SAAU9F,EAAEsD,OAAOF,UAC/D7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,WACHkC,KAAK,sBAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,yBACI5E,UAAU,cACV8E,SAAU,SAACrD,GAAD,OAAOkG,EAAY,2BAAKD,GAAN,IAAgBF,eAAgB/F,EAAEsD,OAAOF,UAFzE,UAII,wBAAQA,MAAM,GAAGkD,UAAQ,EAACC,UAAQ,EAAlC,6BAGC5B,EAAeG,KAAI,SAAC0B,GAAD,OAChB,wBAA0BpD,MAAOoD,EAASnF,GAA1C,SACKmF,EAASlE,cADDkE,EAASnF,OAR9B,UAeJ,uBACA,sBAAK9C,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,yBACI5E,UAAU,cACV8E,SAAU,SAACrD,GAAD,OAAOkG,EAAY,2BAAKD,GAAN,IAAgBD,eAAgBhG,EAAEsD,OAAOF,UAFzE,UAII,wBAAQA,MAAM,GAAGkD,UAAQ,EAACC,UAAQ,EAAlC,6BAGCb,EAAeZ,KAAI,SAAC2B,GAAD,OAChB,wBAA0BrD,MAAOqD,EAASpF,GAA1C,SACKoF,EAASzB,cADDyB,EAASpF,OAR9B,UAeJ,uBACA,qBAAK9C,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAO4C,EAAc5C,EAAEiD,cAChCxD,KAAK,SACLlB,UAAU,kBAHd,oCCdjBmI,EA7GQ,WACnB,IAAQrF,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAgCwD,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBC,EAAjB,KACA,EAAwCvE,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KACA,EAAwC1B,mBAAS,IAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KAEA,EAAoCjD,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEM1E,EAAUC,cAEV0E,EAAQ,uCAAG,oCAAApB,EAAA,6DACTkD,EAAiB,GACjBC,EAAiB,GAFR,SAIU5F,EAAYQ,IAAe,cAAeS,EAAIjC,EAASX,OAJjE,YAIToI,EAJS,QAKE9F,KAAM8F,EAAW3F,KALnB,wBAMT6E,EAAiBc,EAAW3F,KAAK6E,eACjCC,EAAiBa,EAAW3F,KAAK8E,eACjChC,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD2F,EAAYC,EAAW3F,MATd,UAWkBd,EAAYQ,IACnC,mBACAmF,EACA3G,EAASX,OAdJ,eAWL2H,EAXK,QAgBUrF,IAAMqF,EAAelF,MACpC8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD8C,EAAgBqC,EAAelF,OAE/B8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYmF,EAAenF,aApBrE,UAuBkBb,EAAYQ,IACnC,mBACAoF,EACA5G,EAASX,OA1BJ,SAuBL4H,EAvBK,QA4BUtF,IAAMsF,EAAenF,MACpC8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxDqE,EAAgBe,EAAenF,OAE/B8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYoF,EAAepF,aAhCrE,wBAoCT+C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAY4F,EAAW5F,aApC7D,4CAAH,qDAwCdmD,qBAAU,WACNH,MACD,IAEH,IAAMI,EAAa,uCAAG,WAAOrE,GAAP,eAAA6C,EAAA,sEACCzC,EAAYkB,OAAkB,cAAeD,EAAIjC,EAASX,OAD3D,QACdyF,EADc,QAGPnD,IACPiD,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD3B,EAAQY,QAAQ,eAEhB8D,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAPpD,2CAAH,sDAWnB,OACI,qCACI,cAAC,EAAD,eAAYwC,IACZ,wDAEA,gCACI,yCACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,uBACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASd,WACnC,oBAAItH,UAAU,WAAd,uBACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASb,WACnC,oBAAIvH,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAaxB,eACvC,oBAAI/D,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaL,eACvC,oBAAIzG,UAAU,WAAd,0BACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASR,YAAc,MAAQ,aAIjE,uBAEA,qBAAK5H,UAAU,aAAf,SACI,wBAAQwB,QAAS,SAACC,GAAD,OAAOqE,EAAcrE,EAAEiD,cAAcxD,KAAK,SAASlB,UAAU,iBAA9E,2BAIJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,aAAcjB,UAAU,iBAAlC,oCCbDuI,EAzFS,WACpB,IAAQzF,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAgCwD,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBC,EAAjB,KACA,EAAwCvE,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KACA,EAAwC1B,mBAAS,IAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KAEA,EAAoCjD,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEMC,EAAQ,uCAAG,oCAAApB,EAAA,6DACTkD,EAAiB,GACjBC,EAAiB,GAFR,SAIU5F,EAAYQ,IAAe,cAAeS,EAAIjC,EAASX,OAJjE,YAIToI,EAJS,QAKE9F,KAAM8F,EAAW3F,KALnB,wBAMT6E,EAAiBc,EAAW3F,KAAK6E,eACjCC,EAAiBa,EAAW3F,KAAK8E,eACjChC,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD2F,EAAYC,EAAW3F,MATd,UAWkBd,EAAYQ,IACnC,mBACAmF,EACA3G,EAASX,OAdJ,eAWL2H,EAXK,QAgBUrF,IAAMqF,EAAelF,MACpC8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxD8C,EAAgBqC,EAAelF,OAE/B8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYmF,EAAenF,aApBrE,UAuBkBb,EAAYQ,IACnC,mBACAoF,EACA5G,EAASX,OA1BJ,SAuBL4H,EAvBK,QA4BUtF,IAAMsF,EAAenF,MACpC8C,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IACxDqE,EAAgBe,EAAenF,OAE/B8C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYoF,EAAepF,aAhCrE,wBAoCT+C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAY4F,EAAW5F,aApC7D,4CAAH,qDA6Cd,OAJAmD,qBAAU,WACNH,MACD,IAGC,qCACI,cAAC,EAAD,eAAYR,IACZ,yCAEA,gCACI,2CACA,uBACA,qBAAIlF,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,gBACA,oBAAIA,UAAU,WAAd,SAA0B8C,IAC1B,oBAAI9C,UAAU,WAAd,uBACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASd,WACnC,oBAAItH,UAAU,WAAd,uBACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASb,WACnC,oBAAIvH,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0BuF,EAAaxB,eACvC,oBAAI/D,UAAU,WAAd,2BACA,oBAAIA,UAAU,WAAd,SAA0B8G,EAAaL,eACvC,oBAAIzG,UAAU,WAAd,0BACA,oBAAIA,UAAU,WAAd,SAA0BoI,EAASR,YAAc,MAAQ,aAIjE,8BACI,cAAC,IAAD,CAAM3G,GAAI,aAAcjB,UAAU,iBAAlC,gCCuFDwI,EAxKM,WACjB,IAAQ1F,EAAOwC,cAAPxC,GAEFjC,EAAWC,qBAAWR,GAE5B,EAAwCwD,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMrD,EAAUC,cAEhB,EAAgC8C,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBC,EAAjB,KACA,EAA4CvE,mBAAS,IAArD,mBAAOsC,EAAP,KAAuBC,EAAvB,KACA,EAA4CvC,mBAAS,IAArD,mBAAOqD,EAAP,KAAuBC,EAAvB,KAEMnB,EAAW,uCAAG,WAAOxE,GAAP,eAAA6C,EAAA,yDAChB7C,EAAEC,iBAEwB,KAAtB0G,EAASd,UACa,IAAtBc,EAASb,UACmB,KAA5Ba,EAASZ,gBACmB,KAA5BY,EAASX,eANG,gBAQZrD,EAAgB,iBARJ,8BAUNG,EAAuB,CACzBzB,GAAIA,EACJwE,SAAUc,EAASd,SACnBC,SAAU/C,OAAO4D,EAASb,UAC1BC,eAAgBY,EAASZ,eACzBC,eAAgBW,EAASX,eACzBG,YAAaQ,EAASR,aAhBd,SAmBO/F,EAAYqB,IAAe,cAAeJ,EAAIyB,EAAW1D,EAASX,OAnBzE,cAoBDsC,IACP4B,EAAgB,IAChBrD,EAAQY,QAAQ,eAEhByC,EAAgB,IAxBR,4CAAH,sDA6BXsB,EAAQ,uCAAG,gCAAApB,EAAA,sEACMzC,EAAYQ,IAAe,cAAeS,EAAIjC,EAASX,OAD7D,cACTyF,EADS,QAEFnD,IAAMmD,EAAOhD,MACpB0F,EAAY1C,EAAOhD,MAHV,SAMcd,EAAYyE,OAAsB,kBAAmBzF,EAASX,OAN5E,cAMT2H,EANS,QAOMrF,IAAMqF,EAAelF,MACpC0D,EAAkBwB,EAAelF,MARxB,UAWcd,EAAYyE,OAAsB,kBAAmBzF,EAASX,OAX5E,SAWT4H,EAXS,QAYMtF,IAAMsF,EAAenF,MACpCyE,EAAkBU,EAAenF,MAbxB,4CAAH,qDAqBd,OAJAkD,qBAAU,WACNH,MACD,IAGC,mCACI,sBAAMjB,SAAU,SAAChD,GAAD,OAAOwE,EAAYxE,EAAEiD,cAArC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACI,sCACA,2CACA,uCAAU8C,EAAV,OACA,oCACI,uBACA,cAAC,EAAD,CAAOW,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,WAAf,yBACA,uBACIC,MAAOuD,EAASd,SAChBxC,SAAU,SAACrD,GAAD,OAAO4G,EAAY,2BAAKD,GAAN,IAAgBd,SAAU7F,EAAEsD,OAAOF,UAC/D7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,WACHkC,KAAK,sBAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,WAAf,yBACA,uBACIC,MAAOuD,EAASb,SAChBzC,SAAU,SAACrD,GAAD,OAAO4G,EAAY,2BAAKD,GAAN,IAAgBb,SAAU/C,OAAO/C,EAAEsD,OAAOF,WACtE7E,UAAU,eACVkB,KAAK,OACL4B,GAAG,WACHkC,KAAK,sBAGb,uBACA,sBAAKhF,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,yBACI5E,UAAU,cACV8E,SAAU,SAACrD,GAAD,OAAO4G,EAAY,2BAAKD,GAAN,IAAgBZ,eAAgB/F,EAAEsD,OAAOF,UACrEA,MAAOuD,EAASZ,eAHpB,UAKKpB,EAAeG,KAAI,SAAC0B,GAAD,OAChB,wBAA0BpD,MAAOoD,EAASnF,GAA1C,SACKmF,EAASlE,cADDkE,EAASnF,OAN9B,UAaJ,uBACA,sBAAK9C,UAAU,aAAf,UACI,uBAAO4E,QAAQ,eAAf,6BACA,yBACI5E,UAAU,cACV8E,SAAU,SAACrD,GAAD,OAAO4G,EAAY,2BAAKD,GAAN,IAAgBX,eAAgBhG,EAAEsD,OAAOF,UACrEA,MAAOuD,EAASX,eAHpB,UAKKN,EAAeZ,KAAI,SAAC2B,GAAD,OAChB,wBAA0BrD,MAAOqD,EAASpF,GAA1C,SACKoF,EAASzB,cADDyB,EAASpF,OAN9B,UAaJ,uBACA,sBAAK9C,UAAU,wBAAf,UACI,uBAAOA,UAAU,mBAAmB4E,QAAQ,oBAA5C,2BAGA,uBACI6D,QAASL,EAASR,YAClB9C,SAAU,SAACrD,GAAD,OAAO4G,EAAY,2BAAKD,GAAN,IAAgBR,YAAanG,EAAEsD,OAAO0D,YAClEvH,KAAK,WACLlB,UAAU,mBACV8C,GAAG,yBAIX,uBACA,qBAAK9C,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAOwE,EAAYxE,EAAEiD,cAC9BxD,KAAK,SACLlB,UAAU,kBAHd,oBAQJ,uBACA,8BACI,cAAC,IAAD,CAAMiB,GAAI,aAAcjB,UAAU,iBAAlC,0CC9J1BkG,EAAa,SAAC1C,GAAD,OACf,qBAAIxD,UAAS,UAAKwD,EAAM4E,SAASR,YAAc,2BAA6B,IAA5E,UACI,oBAAIpG,QAAS,SAACC,GAAD,OAAOiH,EAAyBlF,EAAM4E,WAAnD,SAA+D5E,EAAM4E,SAASd,WAC9E,6BAAK9D,EAAM4E,SAASb,WACpB,6BAAK/D,EAAM4E,SAASO,mBACpB,6BAAKnF,EAAM4E,SAASQ,mBACpB,+BACI,cAAC,IAAD,CAAM3H,GAAI,cAAgBuC,EAAM4E,SAAStF,GAAI9C,UAAS,UAAKwD,EAAM4E,SAASR,YAAc,iBAAmB,aAA3G,qBAEQ,IAHZ,IAIM,IACF,cAAC,IAAD,CAAM3G,GAAI,mBAAqBuC,EAAM4E,SAAStF,GAAI9C,UAAS,UAAKwD,EAAM4E,SAASR,YAAc,iBAAmB,aAAhH,kBAEQ,IAPZ,IAQM,IACF,cAAC,IAAD,CAAM3G,GAAI,qBAAuBuC,EAAM4E,SAAStF,GAAI9C,UAAS,UAAKwD,EAAM4E,SAASR,YAAc,iBAAmB,aAAlH,oBAEQ,WAMdc,EAAwB,uCAAG,WAAON,GAAP,SAAA9D,EAAA,sDAC7BuE,QAAQC,IAAIV,GADiB,2CAAH,sDA8FfW,EA7EO,WAClB,IAAMlI,EAAWC,qBAAWR,GAC5B,EAAkCwD,mBAAS,IAA3C,mBAAOkF,EAAP,KAAkBC,EAAlB,KACA,EAAoCnF,mBAAS,CAAEoB,WAAY5B,EAAY6B,QAASzC,YAAa,IAA7F,mBAAOwC,EAAP,KAAmBO,EAAnB,KAEAI,qBAAU,WACNH,MACD,IAEH,IAAMA,EAAQ,uCAAG,gCAAApB,EAAA,6DACT4E,EAA6B,GAE3BC,EAHO,+BAAA7E,EAAA,MAG6B,WAAO8E,GAAP,iBAAA9E,EAAA,sEACXzC,EAAYQ,IACnC,mBACA+G,EAAK5B,eACL3G,EAASX,OAJyB,cAClC2H,EADkC,QAMnBrF,IAAMqF,EAAelF,KACpCyG,EAAKT,iBAAmBd,EAAelF,KAAKoB,aAE5C0B,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYmF,EAAenF,aATxC,SAYXb,EAAYQ,IACnC,mBACA+G,EAAK3B,eACL5G,EAASX,OAfyB,cAYlC4H,EAZkC,QAiBnBtF,IAAMsF,EAAenF,KACpCyG,EAAKR,iBAAmBd,EAAenF,KAAK8D,aAE5ChB,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYoF,EAAepF,aApBxC,kBAsB/B0G,GAtB+B,2CAH7B,+DA4BMvH,EAAYyE,OAAkB,aAAczF,EAASX,OA5B3D,YA4BTyF,EA5BS,QA6BFnD,KAAMmD,EAAOhD,KA7BX,wBA8BTuG,EAAgBvD,EAAOhD,KA9Bd,KA+BTsG,EA/BS,UA+BUI,QAAQC,IAAIJ,EAAc3C,IAAd,uCAAkB,WAAO6C,GAAP,SAAA9E,EAAA,+EAAgB6E,EAAkCC,IAAlD,2CAAlB,wDA/BtB,mCAgCT3D,EAAc,CAAEP,WAAY5B,EAAYsC,GAAIlD,WAAY,IAhC/C,wBAkCT+C,EAAc,CAAEP,WAAY5B,EAAY8B,MAAO1C,WAAYiD,EAAOjD,aAlCzD,4CAAH,qDAsCd,OACI,qCACI,cAAC,EAAD,eAAYwC,IACZ,qBAAKlF,UAAU,aAAf,SACI,cAAC,IAAD,CAAMiB,GAAG,qBAAqBjB,UAAU,eAAe2D,KAAK,SAA5D,+BAIJ,uBACA,4CACA,wBAAO3D,UAAU,QAAjB,UACI,gCACI,+BACI,2CACA,2CACA,+CACA,+CACA,4BAGR,gCACKgJ,EAAUzC,KAAI,SAAC6B,GAAD,OACX,cAAC,EAAD,CAAYA,SAAUA,GAAeA,EAAStF,gBCjGvDyG,EAnBG,WACd,IAAM1I,EAAWC,qBAAWR,GAC5B,OACI,mCACwB,OAAnBO,EAASX,MACN,mCACI,0CAGJ,mCACI,yCACYW,EAASV,UAAa,IAAOU,EAAST,SADlD,YCPEoJ,EAAtB,iIAQI,WAAmBtH,EAAqBuH,GAAxC,wFACQC,EAAgBC,KAAKC,UAAUH,GADvC,kBAG6BtH,KAAKC,MAAMa,KAAqBf,EAAawH,GAH1E,cAGYnH,EAHZ,yBAIe,CACHC,GAAID,EAASE,QAAU,IACvBC,WAAYH,EAASE,OACrBE,KAAMJ,EAASI,OAP3B,uCAWYC,EAXZ,uBAYe,CACHJ,IAAI,EACJE,WAAU,oBAAEE,EAAML,gBAAR,aAAE,EAAgBE,cAAlB,QAA4B,IACtCI,UAAU,UAACD,EAAML,gBAAP,aAAC,EAAgBI,MAAmBE,WAf1D,yDARJ,gEAAsB2G,EACDpH,MAAQe,IAAMC,OAAO,CAClCC,QAASzB,EACTE,QAAS,CACL,eAAgB,sBCJ5B,IA6Ee+H,EA7ED,WACV,IAAMhJ,EAAWC,qBAAWR,GAE5B,EAAkCwD,mBAAS,CAAEgG,MAAO,oBAAqBC,SAAU,aAAnF,mBAAON,EAAP,KAAkBO,EAAlB,KACA,EAAwClG,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEM6F,EAAY,uCAAG,WAAOxI,GAAP,eAAA6C,EAAA,6DACjB7C,EAAEC,iBACsB,KAApB+H,EAAUK,OAAuC,KAAvBL,EAAUM,UACpC3F,EAAgB,4BAEpBA,EAAgB,IALC,SAMIoF,EAAgBK,MAAM,gBAAiBJ,GAN3C,QAMblH,EANa,QAOHC,IAGV4B,EAAgB,IAChBvD,EAASR,YAAYkC,EAASI,KAAMzC,MAAOqC,EAASI,KAAMxC,UAAWoC,EAASI,KAAMvC,WAHpFgE,EAAgB7B,EAASM,SAAU,IARtB,2CAAH,sDAelB,OACI,qCACwB,OAAnBhC,EAASX,MAAiB,cAAC,IAAD,CAAUe,GAAG,MAAS,KACjD,sBAAMwD,SAAU,SAAChD,GAAD,OAAOwI,EAAaxI,EAAEiD,cAAtC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,+DACI,oCACI,uBACA,cAAC,EAAD,CAAOyD,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,cAAf,mBACA,uBACIC,MAAO4E,EAAUK,MACjBhF,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBK,MAAOrI,EAAEsD,OAAOF,UAC9D7E,UAAU,eACVkB,KAAK,QACL4B,GAAG,cACHkC,KAAK,cACLkF,YAAY,mBACZC,aAAa,gBAGrB,uBACA,sBAAKnK,UAAU,aAAf,UACI,uBAAO4E,QAAQ,iBAAf,sBACA,uBACIC,MAAO4E,EAAUM,SACjBjF,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBM,SAAUtI,EAAEsD,OAAOF,UACjE7E,UAAU,eACVkB,KAAK,WACL4B,GAAG,iBACHkC,KAAK,iBACLkF,YAAY,iCACZC,aAAa,wBAGrB,uBACA,qBAAKnK,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAOwI,EAAaxI,EAAEiD,cAC/BxD,KAAK,SACLlB,UAAU,eAHd,qCCwCjBoK,EArGE,WACb,IAAMvJ,EAAWC,qBAAWR,GAE5B,EAAkCwD,mBAAS,CAAEgG,MAAO,GAAIC,SAAU,GAAK5J,UAAW,GAAIC,SAAU,KAAhG,mBAAOqJ,EAAP,KAAkBO,EAAlB,KACA,EAAwClG,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMiG,EAAe,uCAAG,WAAO5I,GAAP,eAAA6C,EAAA,6DACpB7C,EAAEC,iBACsB,KAApB+H,EAAUK,OAAuC,KAAvBL,EAAUM,UACpC3F,EAAgB,4BAEpBA,EAAgB,IALI,SAMCoF,EAAgBK,MAAM,mBAAoBJ,GAN3C,QAMhBlH,EANgB,QAONC,IAGV4B,EAAgB,IAChBvD,EAASR,YAAYkC,EAASI,KAAMzC,MAAOqC,EAASI,KAAMxC,UAAWoC,EAASI,KAAMvC,WAHpFgE,EAAgB7B,EAASM,SAAU,IARnB,2CAAH,sDAerB,OACI,qCACwB,OAAnBhC,EAASX,MAAiB,cAAC,IAAD,CAAUe,GAAG,MAAS,KACjD,sBAAMwD,SAAU,SAAChD,GAAD,OAAO4I,EAAgB5I,EAAEiD,cAAzC,SACI,sBAAK1E,UAAU,MAAf,UACI,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,qBAAf,UACA,sDACI,oCACI,uBACA,cAAC,EAAD,CAAOyD,KAAuB,KAAjBU,EAAqBP,QAASO,EAAcT,WAAY5D,EAAY6E,SACjF,sBAAK3E,UAAU,aAAf,UACI,uBAAO4E,QAAQ,cAAf,mBACA,uBACIC,MAAO4E,EAAUK,MACjBhF,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBK,MAAOrI,EAAEsD,OAAOF,UAC9D7E,UAAU,eACVkB,KAAK,QACL4B,GAAG,cACHkC,KAAK,cACLkF,YAAY,wBAGpB,uBACA,sBAAKlK,UAAU,aAAf,UACI,uBAAO4E,QAAQ,iBAAf,sBACA,uBACIC,MAAO4E,EAAUM,SACjBjF,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBM,SAAUtI,EAAEsD,OAAOF,UACjE7E,UAAU,eACVkB,KAAK,WACL4B,GAAG,iBACHkC,KAAK,iBACLkF,YAAY,gBAGpB,uBACA,sBAAKlK,UAAU,aAAf,UACI,uBAAO4E,QAAQ,kBAAf,uBACA,uBACIC,MAAO4E,EAAUtJ,UACjB2E,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBtJ,UAAWsB,EAAEsD,OAAOF,UAClE7E,UAAU,eACVkB,KAAK,YACL4B,GAAG,kBACHkC,KAAK,kBACLkF,YAAY,iBAGpB,uBACA,sBAAKlK,UAAU,aAAf,UACI,uBAAO4E,QAAQ,iBAAf,sBACA,uBACIC,MAAO4E,EAAUrJ,SACjB0E,SAAU,SAACrD,GAAD,OAAOuI,EAAa,2BAAKP,GAAN,IAAiBrJ,SAAUqB,EAAEsD,OAAOF,UACjE7E,UAAU,eACVkB,KAAK,WACL4B,GAAG,iBACHkC,KAAK,iBACLkF,YAAY,gBAGpB,uBACA,qBAAKlK,UAAU,aAAf,SACI,wBACIwB,QAAS,SAACC,GAAD,OAAO4I,EAAgB5I,EAAEiD,cAClCxD,KAAK,SACLlB,UAAU,eAHd,uCCrFjBsK,EANC,WACZ,OACI,yDC2EOC,OAhDf,WACI,IAIA,EAAgCzG,mBAAS,2BAAI7D,GAAL,IAAsBI,YAJ1C,SAACH,EAAsBC,EAAmBC,GAC1DoK,EAAY,2BAAI3J,GAAL,IAAeX,QAAOC,YAAWC,kBAGhD,mBAAOS,EAAP,KAAiB2J,EAAjB,KAEA,OACI,mCACI,eAAC/J,EAAD,CAAoBoE,MAAOhE,EAA3B,UAEI,cAAC,EAAD,IACA,qBAAKb,UAAU,YAAf,SACI,sBAAM2D,KAAK,OAAO3D,UAAU,OAA5B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyK,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IAEjC,cAAC,IAAD,CAAOmB,KAAK,kBAAkBC,UAAWd,IACzC,cAAC,IAAD,CAAOa,KAAK,qBAAqBC,UAAWP,IAE5C,cAAC,IAAD,CAAOM,KAAK,yBAAyBC,UAAW9G,IAChD,cAAC,IAAD,CAAO6G,KAAK,2BAA2BC,UAAW3E,IAClD,cAAC,IAAD,CAAO0E,KAAK,6BAA6BC,UAAWtF,IACpD,cAAC,IAAD,CAAOqF,KAAK,sBAAsBC,UAAW5E,IAC7C,cAAC,IAAD,CAAO2E,KAAK,kBAAkBC,UAAWxE,IAEzC,cAAC,IAAD,CAAOuE,KAAK,yBAAyBC,UAAWnE,IAChD,cAAC,IAAD,CAAOkE,KAAK,2BAA2BC,UAAW1D,IAClD,cAAC,IAAD,CAAOyD,KAAK,6BAA6BC,UAAW9D,IACpD,cAAC,IAAD,CAAO6D,KAAK,sBAAsBC,UAAW3D,IAC7C,cAAC,IAAD,CAAO0D,KAAK,kBAAkBC,UAAWzD,IAEzC,cAAC,IAAD,CAAOwD,KAAK,oBAAoBC,UAAWtD,IAC3C,cAAC,IAAD,CAAOqD,KAAK,sBAAsBC,UAAWnC,IAC7C,cAAC,IAAD,CAAOkC,KAAK,wBAAwBC,UAAWxC,IAC/C,cAAC,IAAD,CAAOuC,KAAK,iBAAiBC,UAAWpC,IACxC,cAAC,IAAD,CAAOmC,KAAK,aAAaC,UAAW5B,IAEpC,cAAC,IAAD,CAAO4B,UAAWL,WAI9B,cAAC,EAAD,UCxDhBM,IAASC,OACL,cAAC,IAAD,CAAQC,SAAUC,SAAlB,SACI,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,QAGRC,SAASC,eAAe,W","file":"static/js/main.6c60479b.chunk.js","sourcesContent":["export enum EAlertClass {\r\n    Primary = 'alert-primary',\r\n    Secondary = 'alert-secondary',\r\n    Success = 'alert-success',\r\n    Danger = 'alert-danger',\r\n    Warning = 'alert-warning',\r\n    Info = 'alert-info',\r\n    Light = 'alert-light',\r\n    Dark = 'alert-dark',\r\n}\r\n\r\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\r\n    \r\n    return props.show ? <div className={'alert ' + props.alertClass} role=\"alert\">{props.message}</div> : null;\r\n}\r\n\r\nexport default Alert;\r\n","const Footer = () => {\r\n    return (\r\n        <footer className=\"border-top footer text-muted\">\r\n            <div className=\"container\">\r\n                &copy; 2021 - React App\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nexport interface IAppState {\r\n    token: string | null;\r\n    firstName: string;\r\n    lastName: string;\r\n    setAuthInfo: (token: string | null, firstName: string, lastName: string) => void;\r\n}\r\n\r\nexport const initialAppState : IAppState = {\r\n    token: null,\r\n    firstName: '',\r\n    lastName: '',\r\n    setAuthInfo: (token: string | null, firstName: string, lastName: string): void => {}\r\n}\r\n\r\nexport const AppContext = React.createContext<IAppState>(initialAppState);\r\nexport const AppContextProvider = AppContext.Provider;\r\nexport const AppContextConsumer = AppContext.Consumer;\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Header = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-secondary border-bottom box-shadow mb-3\">\r\n                <div className=\"container\">\r\n                    <NavLink className=\"navbar-brand\" to=\"/\">\r\n                        React App\r\n                    </NavLink>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\".navbar-collapse\"\r\n                        aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\r\n                        <ul className=\"navbar-nav flex-grow-1\">\r\n                            {appState.token === null ? (\r\n                                <></>\r\n                            ) : (\r\n                                <>\r\n                                    {\" \"}\r\n                                    <li className=\"nav-item\">\r\n                                        <NavLink className=\"nav-link text-dark\" to=\"/todotasks\">\r\n                                            Todo Tasks\r\n                                        </NavLink>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <NavLink className=\"nav-link text-dark\" to=\"/todocategories\">\r\n                                            Todo Categories\r\n                                        </NavLink>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <NavLink className=\"nav-link text-dark\" to=\"/todopriorities\">\r\n                                            Todo Priorities\r\n                                        </NavLink>\r\n                                    </li>{\" \"}\r\n                                </>\r\n                            )}\r\n                        </ul>\r\n                        <ul className=\"navbar-nav\">\r\n                            {appState.token === null ? (\r\n                                <>\r\n                                    <li className=\"nav-item\">\r\n                                        <NavLink className=\"nav-link text-light\" to=\"/identity/register\">\r\n                                            Register\r\n                                        </NavLink>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <NavLink className=\"nav-link text-light\" to=\"/identity/login\">\r\n                                            Login\r\n                                        </NavLink>\r\n                                    </li>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <li className=\"nav-item\">\r\n                                        <span className=\"nav-link text-dark\">\r\n                                            {appState.firstName + \" \" + appState.lastName}\r\n                                        </span>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                       \r\n                                        <button \r\n                                            onClick={(e) => {\r\n                                                {\r\n                                                    e.preventDefault();\r\n                                                    appState.setAuthInfo(null, \"\", \"\");\r\n                                                    history.replace(\"/\");\r\n                                                }\r\n                                            }}\r\n                                            className=\"btn btn-link nav-link text-light\"\r\n                                        >\r\n                                            Logout\r\n                                        </button>\r\n                                    </li>\r\n                                </>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","export const ApiBaseUrl = \"https://taltech.akaver.com/api/v1\";","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { ApiBaseUrl } from '../configuration';\r\nimport { IFetchResponse } from '../types/IFetchResponse';\r\nimport { IMessages } from '../types/IMessages';\r\n\r\nexport abstract class BaseService {\r\n    protected static axios = Axios.create({\r\n        baseURL: ApiBaseUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });\r\n\r\n    protected static getAxiosConfiguration(token: string | null): AxiosRequestConfig | undefined {\r\n        if (!token) return undefined;\r\n        const config: AxiosRequestConfig = {\r\n            headers: {\r\n                'Cache-Control': 'no-cache',\r\n                Pragma: 'no-cache',\r\n                Expires: '0',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };  \r\n        return config;      \r\n    }\r\n\r\n    static async getAll<TEntity>(apiEndpoint: string, token: string | null): Promise<IFetchResponse<TEntity[]>> {\r\n        try {\r\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(token));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n    }\r\n\r\n    static async get<TEntity>(apiEndpoint: string, id: string, token: string | null): Promise<IFetchResponse<TEntity>> {\r\n        try {\r\n            apiEndpoint = apiEndpoint + id;\r\n            let response = await this.axios.get<TEntity>(apiEndpoint, BaseService.getAxiosConfiguration(token));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data \r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n    }\r\n\r\n    static async delete<TEntity>(apiEndpoint: string, id: string, token: string | null): Promise<IFetchResponse<TEntity>> {\r\n        try {\r\n            apiEndpoint = apiEndpoint + id;\r\n\r\n            let response = await this.axios.delete<TEntity>(apiEndpoint, BaseService.getAxiosConfiguration(token));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n    }\r\n\r\n    static async post<TEntity>(apiEndpoint: string, entity: TEntity, token: string | null): Promise<IFetchResponse<TEntity>> {\r\n        try {\r\n            let response = await this.axios.post<TEntity>(apiEndpoint, entity, BaseService.getAxiosConfiguration(token));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data \r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n    }\r\n\r\n    static async put<TEntity>(apiEndpoint: string, id: string, entity: TEntity, token: string | null): Promise<IFetchResponse<TEntity>> {\r\n        try {\r\n            apiEndpoint = apiEndpoint + id;\r\n            \r\n            let response = await this.axios.put<TEntity>(apiEndpoint, entity, BaseService.getAxiosConfiguration(token));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data \r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","export enum EPageStatus {\r\n    Loading = \"Loading...\",\r\n    Error = \"Error...\",\r\n    OK = \"Ok\",\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst TodoCategoryCreate = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [categoryData, setCategoryData] = useState({ categoryName: \"\", categorySort: \"\"});\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const createClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (categoryData.categoryName === \"\" || categoryData.categorySort === \"\") {\r\n            setAlertMessage(\"Empty category name or category sort!\");\r\n        } else {\r\n            const objToSave: ITodoCategory = {\r\n                categoryName: categoryData.categoryName!,\r\n                categorySort: Number(categoryData.categorySort!),\r\n            };\r\n\r\n            let result = await BaseService.post<ITodoCategory>(\"/TodoCategories/\", objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoCategories\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => createClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h1>Create</h1>\r\n                    <h4>Todo category</h4>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"CategoryName\">Category name *</label>\r\n                                <input\r\n                                    value={categoryData.categoryName}\r\n                                    onChange={(e) => setCategoryData({ ...categoryData, categoryName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"CategoryName\"\r\n                                    name=\"Input.CategoryName\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"CategorySort\">Category Sort *</label>\r\n                                <input\r\n                                    value={categoryData.categorySort}\r\n                                    onChange={(e) => setCategoryData({ ...categoryData, categorySort: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"CategorySort\"\r\n                                    name=\"Input.CategorySort\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => createClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoCategoryCreate;\r\n","import { EPageStatus } from \"../types/EPageStatus\";\r\n\r\nconst Loader = (props: {pageStatus:EPageStatus, statusCode:  number}) => {\r\n    if (props.pageStatus === EPageStatus.Loading){\r\n        return <div className=\"alert alert-secondary\" role=\"alert\">Loading...</div>;\r\n    }\r\n    if (props.pageStatus === EPageStatus.Error) {\r\n        return <div className=\"alert alert-danger\" role=\"alert\">Error... {props.statusCode}</div>\r\n    }\r\n    return <></>;\r\n}\r\n\r\nexport default Loader;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst TodoCategoryDelete = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const history = useHistory();\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoCategory>(\"/TodoCategories/\", id, appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoCategory(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const deleteClicked = async (e: Event) => {\r\n        let result = await BaseService.delete<ITodoCategory>(\"/TodoCategories/\", id, appState.token);\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            history.replace(\"/TodoCategories\");\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Delete this todo category?</h1>\r\n\r\n            <div>\r\n                <h4>Details</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Category Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categoryName}</dd>\r\n                    <dt className=\"col-sm-4\">Category Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categorySort}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div className=\"form-group\">\r\n                <button onClick={(e) => deleteClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-danger\">\r\n                    Yes, delete\r\n                </button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <Link to={\"/todocategories\"} className=\"link-secondary\">\r\n                    No, back to List\r\n                </Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoCategoryDelete;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nconst TodoCategoryDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoCategory>(\"/TodoCategories/\", id, appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoCategory(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Details</h1>\r\n\r\n            <div>\r\n                <h4>Todo category</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Category Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categoryName}</dd>\r\n                    <dt className=\"col-sm-4\">Category Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categorySort}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <div>\r\n               <Link to={\"/todocategories\"} className=\"link-secondary\">Back to List</Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoCategoryDetails;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst TodoCategoryEdit = () => {\r\n    const {id} = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\r\n\r\n    const saveClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (todoCategory.categoryName === \"\" || todoCategory.categorySort === 0) {\r\n            setAlertMessage(\"Empty category name or category sort!\");\r\n        } else {\r\n            const objToSave: ITodoCategory = {\r\n                id: id,\r\n                categoryName: todoCategory.categoryName!,\r\n                categorySort: Number(todoCategory.categorySort!),\r\n            };\r\n\r\n            let result = await BaseService.put<ITodoCategory>(\"/TodoCategories/\", id, objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoCategories\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        } \r\n    };\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoCategory>(\"/TodoCategories/\", id, appState.token);\r\n        if (result.ok && result.data) {\r\n            setTodoCategory(result.data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => saveClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h1>Edit</h1>\r\n                    <h4>Todo category</h4>\r\n                    <h6>(ID: {id})</h6>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"CategoryName\">Category name *</label>\r\n                                <input\r\n                                    value={todoCategory.categoryName}\r\n                                    onChange={(e) => setTodoCategory({ ...todoCategory, categoryName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"CategoryName\"\r\n                                    name=\"Input.CategoryName\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"CategorySort\">Category Sort *</label>\r\n                                <input\r\n                                    value={todoCategory.categorySort}\r\n                                    onChange={(e) => setTodoCategory({ ...todoCategory, categorySort: Number(e.target.value) })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"CategorySort\"\r\n                                    name=\"Input.CategorySort\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => saveClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <Link to={\"/todocategories\"} className=\"link-secondary\">Back to List</Link>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoCategoryEdit;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst RowDisplay = (props: { todoCategory: ITodoCategory }) => (\r\n    <tr>\r\n        <td>{props.todoCategory.categoryName}</td>\r\n        <td>{props.todoCategory.categorySort}</td>\r\n        <td>\r\n            <Link to={\"/todocategories/\" + props.todoCategory.id} className=\"link-dark\">\r\n                Details\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todocategories/edit/\" + props.todoCategory.id} className=\"link-dark\">\r\n                Edit\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todocategories/delete/\" + props.todoCategory.id} className=\"link-dark\">\r\n                Delete\r\n            </Link>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nconst TodoCategoryIndex = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<ITodoCategory>(\"/TodoCategories\", appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoCategories(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <div className=\"form-group\">\r\n                <Link to=\"/todocategories/create/\" className=\"btn btn-dark\" role=\"button\">\r\n                    Create new category\r\n                </Link>\r\n            </div>\r\n            <br />\r\n            <h1>Todo Categories</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Category Name</th>\r\n                        <th>Category Sort</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {todoCategories.map((todoCategory) => (\r\n                        <RowDisplay todoCategory={todoCategory} key={todoCategory.id} />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoCategoryIndex;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst  TodoPriorityCreate = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [priorityData, setPriorityData] = useState({ priorityName: \"\", prioritySort: \"\"});\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const createClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (priorityData.priorityName === \"\" || priorityData.prioritySort === \"\") {\r\n            setAlertMessage(\"Empty priority name or priority sort!\");\r\n        } else {\r\n            const objToSave: ITodoPriority = {\r\n                priorityName: priorityData.priorityName!,\r\n                prioritySort: Number(priorityData.prioritySort!),\r\n            };\r\n\r\n            let result = await BaseService.post<ITodoPriority>(\"/TodoPriorities/\", objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoPriorities\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => createClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h1>Create</h1>\r\n                    <h4>Todo priority</h4>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"PriorityName\">Priority name *</label>\r\n                                <input\r\n                                    value={priorityData.priorityName}\r\n                                    onChange={(e) => setPriorityData({ ...priorityData, priorityName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"PriorityName\"\r\n                                    name=\"Input.PriorityName\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"PrioritySort\">Priority Sort *</label>\r\n                                <input\r\n                                    value={priorityData.prioritySort}\r\n                                    onChange={(e) => setPriorityData({ ...priorityData, prioritySort: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"PrioritySort\"\r\n                                    name=\"Input.PrioritySort\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => createClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default  TodoPriorityCreate;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst TodoPriorityDelete = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const history = useHistory();\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoPriority>(\"/TodoPriorities/\", id, appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoPriority(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const deleteClicked = async (e: Event) => {\r\n        let result = await BaseService.delete<ITodoPriority>(\"/TodoPriorities/\", id, appState.token);\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            history.replace(\"/TodoPriorities\");\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Delete this todo priority?</h1>\r\n\r\n            <div>\r\n                <h4>Details</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Priority Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.priorityName}</dd>\r\n                    <dt className=\"col-sm-4\">Priority Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.prioritySort}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div className=\"form-group\">\r\n                <button onClick={(e) => deleteClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-danger\">\r\n                    Yes, delete\r\n                </button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <Link to={\"/todopriorities\"} className=\"link-secondary\">\r\n                    No, back to List\r\n                </Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoPriorityDelete;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nconst TodoPriorityDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoPriority>(\"/TodoPriorities/\", id, appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoPriority(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Details</h1>\r\n\r\n            <div>\r\n                <h4>Todo priority</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Priority Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.priorityName}</dd>\r\n                    <dt className=\"col-sm-4\">Priority Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.prioritySort}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <div>\r\n               <Link to={\"/todopriorities\"} className=\"link-secondary\">Back to List</Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoPriorityDetails;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst TodoPriorityEdit = () => {\r\n    const {id} = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\r\n\r\n    const saveClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (todoPriority.priorityName === \"\" || todoPriority.prioritySort === 0) {\r\n            setAlertMessage(\"Empty priority name or priority sort!\");\r\n        } else {\r\n            const objToSave: ITodoPriority = {\r\n                id: id,\r\n                priorityName: todoPriority.priorityName!,\r\n                prioritySort: Number(todoPriority.prioritySort!),\r\n            };\r\n\r\n            let result = await BaseService.put<ITodoPriority>(\"/TodoPriorities/\", id, objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoPriorities\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        } \r\n    };\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoPriority>(\"/TodoPriorities/\", id, appState.token);\r\n        if (result.ok && result.data) {\r\n            setTodoPriority(result.data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => saveClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h1>Edit</h1>\r\n                    <h4>Todo priority</h4>\r\n                    <h6>(ID: {id})</h6>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"PriorityName\">Priority name *</label>\r\n                                <input\r\n                                    value={todoPriority.priorityName}\r\n                                    onChange={(e) => setTodoPriority({ ...todoPriority, priorityName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"PriorityName\"\r\n                                    name=\"Input.PriorityName\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"PrioritySort\">Priority Sort *</label>\r\n                                <input\r\n                                    value={todoPriority.prioritySort}\r\n                                    onChange={(e) => setTodoPriority({ ...todoPriority, prioritySort: Number(e.target.value) })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"PrioritySort\"\r\n                                    name=\"Input.PrioritySort\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => saveClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <Link to={\"/todopriorities\"} className=\"link-secondary\">Back to List</Link>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoPriorityEdit;\r\n\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst RowDisplay = (props: { todoPriority: ITodoPriority }) => (\r\n    <tr>\r\n        <td>{props.todoPriority.priorityName}</td>\r\n        <td>{props.todoPriority.prioritySort}</td>\r\n        <td>\r\n            <Link to={\"/todopriorities/\" + props.todoPriority.id} className=\"link-dark\">\r\n                Details\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todopriorities/edit/\" + props.todoPriority.id} className=\"link-dark\">\r\n                Edit\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todopriorities/delete/\" + props.todoPriority.id} className=\"link-dark\">\r\n                Delete\r\n            </Link>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nconst TodoPriorityIndex = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<ITodoPriority>(\"/TodoPriorities\", appState.token);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoPriorities(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <div className=\"form-group\">\r\n                <Link to=\"/todopriorities/create/\" className=\"btn btn-dark\" role=\"button\">\r\n                    Create new priority\r\n                </Link>\r\n            </div>\r\n            <br />\r\n            <h1>Todo Priorities</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Priority Name</th>\r\n                        <th>Priority Sort</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {todoPriorities.map((todoPriority) => (\r\n                        <RowDisplay todoPriority={todoPriority} key={todoPriority.id} />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoPriorityIndex;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { ITodoTask } from \"../../dto/ITodoTask\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst TodoTaskCreate = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\r\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\r\n    \r\n    const [taskData, setTaskData] = useState({ taskName: \"\", taskSort: \"\", todoCategoryId: \"\", todoPriorityId: \"\" });\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const createClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (\r\n            taskData.taskName === \"\" ||\r\n            taskData.taskSort === \"\" ||\r\n            taskData.todoCategoryId === \"\" ||\r\n            taskData.todoPriorityId === \"\"\r\n        ) {\r\n            setAlertMessage(\"Empty fields!\");\r\n        } else {\r\n            const objToSave: ITodoTask = {\r\n                taskName: taskData.taskName!,\r\n                taskSort: Number(taskData.taskSort!),\r\n                todoCategoryId: taskData.todoCategoryId!,\r\n                todoPriorityId: taskData.todoPriorityId!,\r\n                isCompleted: false\r\n            };\r\n\r\n            let result = await BaseService.post<ITodoTask>(\"/TodoTasks/\", objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoTasks\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const loadData = async () => {\r\n        let categoryResult = await BaseService.getAll<ITodoCategory>(\"/TodoCategories\", appState.token);\r\n        if (categoryResult.ok && categoryResult.data) {\r\n            setTodoCategories(categoryResult.data);\r\n        } \r\n\r\n        let priorityResult = await BaseService.getAll<ITodoPriority>(\"/TodoPriorities\", appState.token);\r\n        if (priorityResult.ok && priorityResult.data) {\r\n            setTodoPriorities(priorityResult.data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => createClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                        <h1>Create</h1>\r\n                        <h4>Todo task</h4>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskName\">Task name *</label>\r\n                                <input\r\n                                    value={taskData.taskName}\r\n                                    onChange={(e) => setTaskData({ ...taskData, taskName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"TaskName\"\r\n                                    name=\"Input.TaskName\"\r\n                                />\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskSort\">Task sort *</label>\r\n                                <input\r\n                                    value={taskData.taskSort}\r\n                                    onChange={(e) => setTaskData({ ...taskData, taskSort: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"TaskSort\"\r\n                                    name=\"Input.TaskSort\"\r\n                                />\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskCategory\">Task category *</label>\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    onChange={(e) => setTaskData({ ...taskData, todoCategoryId: e.target.value })}\r\n                                >\r\n                                    <option value=\"\" selected disabled>\r\n                                        Select category\r\n                                    </option>\r\n                                    {todoCategories.map((category) => (\r\n                                        <option key={category.id} value={category.id}>\r\n                                            {category.categoryName}\r\n                                        </option>\r\n                                    ))}\r\n                                    ;\r\n                                </select>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskPriority\">Task priority *</label>\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    onChange={(e) => setTaskData({ ...taskData, todoPriorityId: e.target.value })}\r\n                                >\r\n                                    <option value=\"\" selected disabled >\r\n                                        Select priority\r\n                                    </option>\r\n                                    {todoPriorities.map((priority) => (\r\n                                        <option key={priority.id} value={priority.id}>\r\n                                            {priority.priorityName}\r\n                                        </option>\r\n                                    ))}\r\n                                    ;\r\n                                </select>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => createClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoTaskCreate;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoTask } from \"../../dto/ITodoTask\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst TodoTaskDelete = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoTask, setTodoTask] = useState({} as ITodoTask);\r\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\r\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const history = useHistory();\r\n\r\n    const loadData = async () => {\r\n        let todoCategoryId = \"\";\r\n        let todoPriorityId = \"\";\r\n\r\n        let taskResult = await BaseService.get<ITodoTask>(\"/TodoTasks/\", id, appState.token);\r\n        if (taskResult.ok && taskResult.data) {\r\n            todoCategoryId = taskResult.data.todoCategoryId;\r\n            todoPriorityId = taskResult.data.todoPriorityId;\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoTask(taskResult.data);\r\n\r\n            let categoryResult = await BaseService.get<ITodoCategory>(\r\n                \"/TodoCategories/\",\r\n                todoCategoryId,\r\n                appState.token\r\n            );\r\n            if (categoryResult.ok && categoryResult.data) {\r\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n                setTodoCategory(categoryResult.data);\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: categoryResult.statusCode });\r\n            }\r\n    \r\n            let priorityResult = await BaseService.get<ITodoPriority>(\r\n                \"/TodoPriorities/\",\r\n                todoPriorityId,\r\n                appState.token\r\n            );\r\n            if (priorityResult.ok && priorityResult.data) {\r\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n                setTodoPriority(priorityResult.data);\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: priorityResult.statusCode });\r\n            }\r\n\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: taskResult.statusCode });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const deleteClicked = async (e: Event) => {\r\n        let result = await BaseService.delete<ITodoTask>(\"/TodoTasks/\", id, appState.token);\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            history.replace(\"/TodoTasks\");\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Delete this todo task?</h1>\r\n\r\n            <div>\r\n                <h4>Details</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Task Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.taskName}</dd>\r\n                    <dt className=\"col-sm-4\">Task Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.taskSort}</dd>\r\n                    <dt className=\"col-sm-4\">Task Category</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categoryName}</dd>\r\n                    <dt className=\"col-sm-4\">Task Priority</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.priorityName}</dd>\r\n                    <dt className=\"col-sm-4\">Is completed</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.isCompleted ? 'Yes' : 'No'}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div className=\"form-group\">\r\n                <button onClick={(e) => deleteClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-danger\">\r\n                    Yes, delete\r\n                </button>\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <Link to={\"/todotasks\"} className=\"link-secondary\">\r\n                    No, back to List\r\n                </Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoTaskDelete;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoTask } from \"../../dto/ITodoTask\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\n\r\nconst TodoTaskDetails = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [todoTask, setTodoTask] = useState({} as ITodoTask);\r\n    const [todoCategory, setTodoCategory] = useState({} as ITodoCategory);\r\n    const [todoPriority, setTodoPriority] = useState({} as ITodoPriority);\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const loadData = async () => {\r\n        let todoCategoryId = \"\";\r\n        let todoPriorityId = \"\";\r\n\r\n        let taskResult = await BaseService.get<ITodoTask>(\"/TodoTasks/\", id, appState.token);\r\n        if (taskResult.ok && taskResult.data) {\r\n            todoCategoryId = taskResult.data.todoCategoryId;\r\n            todoPriorityId = taskResult.data.todoPriorityId;\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n            setTodoTask(taskResult.data);\r\n\r\n            let categoryResult = await BaseService.get<ITodoCategory>(\r\n                \"/TodoCategories/\",\r\n                todoCategoryId,\r\n                appState.token\r\n            );\r\n            if (categoryResult.ok && categoryResult.data) {\r\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n                setTodoCategory(categoryResult.data);\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: categoryResult.statusCode });\r\n            }\r\n    \r\n            let priorityResult = await BaseService.get<ITodoPriority>(\r\n                \"/TodoPriorities/\",\r\n                todoPriorityId,\r\n                appState.token\r\n            );\r\n            if (priorityResult.ok && priorityResult.data) {\r\n                setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n                setTodoPriority(priorityResult.data);\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: priorityResult.statusCode });\r\n            }\r\n\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: taskResult.statusCode });\r\n        }\r\n        \r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <h1>Details</h1>\r\n\r\n            <div>\r\n                <h4>Todo task</h4>\r\n                <hr />\r\n                <dl className=\"row\">\r\n                    <dt className=\"col-sm-4\">Id</dt>\r\n                    <dd className=\"col-sm-8\">{id}</dd>\r\n                    <dt className=\"col-sm-4\">Task Name</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.taskName}</dd>\r\n                    <dt className=\"col-sm-4\">Task Sort</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.taskSort}</dd>\r\n                    <dt className=\"col-sm-4\">Task Category</dt>\r\n                    <dd className=\"col-sm-8\">{todoCategory.categoryName}</dd>\r\n                    <dt className=\"col-sm-4\">Task Priority</dt>\r\n                    <dd className=\"col-sm-8\">{todoPriority.priorityName}</dd>\r\n                    <dt className=\"col-sm-4\">Is completed</dt>\r\n                    <dd className=\"col-sm-8\">{todoTask.isCompleted ? 'Yes' : 'No'}</dd>\r\n                </dl>\r\n            </div>\r\n\r\n            <div>\r\n                <Link to={\"/todotasks\"} className=\"link-secondary\">\r\n                    Back to List\r\n                </Link>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoTaskDetails;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ITodoTask } from \"../../dto/ITodoTask\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\n\r\nconst TodoTaskEdit = () => {\r\n    const { id } = useParams() as IRouteId;\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const [todoTask, setTodoTask] = useState({} as ITodoTask);\r\n    const [todoCategories, setTodoCategories] = useState([] as ITodoCategory[]);\r\n    const [todoPriorities, setTodoPriorities] = useState([] as ITodoPriority[]);\r\n\r\n    const saveClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (\r\n            todoTask.taskName === \"\" ||\r\n            todoTask.taskSort === 0 ||\r\n            todoTask.todoCategoryId === \"\" ||\r\n            todoTask.todoPriorityId === \"\"\r\n        ) {\r\n            setAlertMessage(\"Empty fields!\");\r\n        } else {\r\n            const objToSave: ITodoTask = {\r\n                id: id,\r\n                taskName: todoTask.taskName!,\r\n                taskSort: Number(todoTask.taskSort!),\r\n                todoCategoryId: todoTask.todoCategoryId!,\r\n                todoPriorityId: todoTask.todoPriorityId!,\r\n                isCompleted: todoTask.isCompleted!,\r\n            };\r\n\r\n            let result = await BaseService.put<ITodoTask>(\"/TodoTasks/\", id, objToSave, appState.token);\r\n            if (result.ok) {\r\n                setAlertMessage(\"\");\r\n                history.replace(\"/TodoTasks\");\r\n            } else {\r\n                setAlertMessage(\"\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.get<ITodoTask>(\"/TodoTasks/\", id, appState.token);\r\n        if (result.ok && result.data) {\r\n            setTodoTask(result.data);\r\n        }\r\n\r\n        let categoryResult = await BaseService.getAll<ITodoCategory>(\"/TodoCategories\", appState.token);\r\n        if (categoryResult.ok && categoryResult.data) {\r\n            setTodoCategories(categoryResult.data);\r\n        }\r\n\r\n        let priorityResult = await BaseService.getAll<ITodoPriority>(\"/TodoPriorities\", appState.token);\r\n        if (priorityResult.ok && priorityResult.data) {\r\n            setTodoPriorities(priorityResult.data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => saveClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                        <h1>Edit</h1>\r\n                        <h4>Todo task</h4>\r\n                        <h6>(ID: {id})</h6>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskName\">Task name *</label>\r\n                                <input\r\n                                    value={todoTask.taskName}\r\n                                    onChange={(e) => setTodoTask({ ...todoTask, taskName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"TaskName\"\r\n                                    name=\"Input.TaskName\"\r\n                                />\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskSort\">Task Sort *</label>\r\n                                <input\r\n                                    value={todoTask.taskSort}\r\n                                    onChange={(e) => setTodoTask({ ...todoTask, taskSort: Number(e.target.value) })}\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"TaskSort\"\r\n                                    name=\"Input.TaskSort\"\r\n                                />\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskCategory\">Task category *</label>\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    onChange={(e) => setTodoTask({ ...todoTask, todoCategoryId: e.target.value })}\r\n                                    value={todoTask.todoCategoryId}\r\n                                >\r\n                                    {todoCategories.map((category) => (\r\n                                        <option key={category.id} value={category.id}>\r\n                                            {category.categoryName}\r\n                                        </option>\r\n                                    ))}\r\n                                    ;\r\n                                </select>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"TaskPriority\">Task priority *</label>\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    onChange={(e) => setTodoTask({ ...todoTask, todoPriorityId: e.target.value })}\r\n                                    value={todoTask.todoPriorityId}\r\n                                >\r\n                                    {todoPriorities.map((priority) => (\r\n                                        <option key={priority.id} value={priority.id}>\r\n                                            {priority.priorityName}\r\n                                        </option>\r\n                                    ))}\r\n                                    ;\r\n                                </select>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"form-group form-check\">\r\n                                <label className=\"form-check-label\" htmlFor=\"formInputCheckBox\">\r\n                                    Is completed? \r\n                                </label>\r\n                                <input\r\n                                    checked={todoTask.isCompleted}\r\n                                    onChange={(e) => setTodoTask({ ...todoTask, isCompleted: e.target.checked }) }\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    id=\"formInputCheckBox\"\r\n                                />\r\n                            </div>\r\n\r\n                            <br />\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => saveClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                            <br />\r\n                            <div>\r\n                                <Link to={\"/todotasks\"} className=\"link-secondary\">\r\n                                    Back to List\r\n                                </Link>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoTaskEdit;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { ITodoTask } from \"../../dto/ITodoTask\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoCategory } from \"../../dto/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dto/ITodoPriority\";\r\n\r\nconst RowDisplay = (props: { todoTask: ITodoTask}) => (\r\n    <tr className={`${props.todoTask.isCompleted ? \"text-secondary strikeout\" : \"\"}`}>\r\n        <td onClick={(e) => ChangeTodoTaskIsComplete(props.todoTask)}>{props.todoTask.taskName}</td>\r\n        <td>{props.todoTask.taskSort}</td>\r\n        <td>{props.todoTask.todoCategoryName}</td>\r\n        <td>{props.todoTask.todoPriorityName}</td>\r\n        <td>\r\n            <Link to={\"/todotasks/\" + props.todoTask.id} className={`${props.todoTask.isCompleted ? \"link-secondary\" : \"link-dark\"}`}>\r\n                Details\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todotasks/edit/\" + props.todoTask.id} className={`${props.todoTask.isCompleted ? \"link-secondary\" : \"link-dark\"}`}>\r\n                Edit\r\n            </Link>{\" \"}\r\n            |{\" \"}\r\n            <Link to={\"/todotasks/delete/\" + props.todoTask.id} className={`${props.todoTask.isCompleted ? \"link-secondary\" : \"link-dark\"}`}>\r\n                Delete\r\n            </Link>{\" \"}\r\n        </td>\r\n        \r\n    </tr>\r\n);\r\n\r\nconst ChangeTodoTaskIsComplete = async (todoTask: ITodoTask) => { // TODO\r\n    console.log(todoTask);\r\n   /* const appState = useContext(AppContext);\r\n\r\n    const objToSave: ITodoTask = {\r\n        id: todoTask.id!,\r\n        taskName: todoTask.taskName!,\r\n        taskSort: Number(todoTask.taskSort!),\r\n        todoCategoryId: todoTask.todoCategoryId!,\r\n        todoPriorityId: todoTask.todoPriorityId!,\r\n        isCompleted: !todoTask.isCompleted!,\r\n    }; */\r\n\r\n  //  let result = await BaseService.put<ITodoTask>(\"/TodoTasks/\", todoTask.id!, objToSave, appState.token);\r\n    \r\n};\r\n\r\nconst TodoTaskIndex = () => {\r\n    const appState = useContext(AppContext);\r\n    const [todoTasks, setTodoTasks] = useState([] as ITodoTask[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const loadData = async () => {\r\n        let todoTasksList: ITodoTask[] = [];\r\n\r\n        const setCategoryAndPriorityNameForTask = async (task: ITodoTask): Promise<ITodoTask> => {\r\n            let categoryResult = await BaseService.get<ITodoCategory>(\r\n                \"/TodoCategories/\",\r\n                task.todoCategoryId,\r\n                appState.token\r\n            );\r\n            if (categoryResult.ok && categoryResult.data) {\r\n                task.todoCategoryName = categoryResult.data.categoryName;\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: categoryResult.statusCode });\r\n            }\r\n\r\n            let priorityResult = await BaseService.get<ITodoPriority>(\r\n                \"/TodoPriorities/\",\r\n                task.todoPriorityId,\r\n                appState.token\r\n            );\r\n            if (priorityResult.ok && priorityResult.data) {\r\n                task.todoPriorityName = priorityResult.data.priorityName;\r\n            } else {\r\n                setPageStatus({ pageStatus: EPageStatus.Error, statusCode: priorityResult.statusCode });\r\n            }\r\n            return task;\r\n        };\r\n\r\n        let result = await BaseService.getAll<ITodoTask>(\"/TodoTasks\", appState.token);\r\n        if (result.ok && result.data) {\r\n            todoTasksList = result.data;\r\n            setTodoTasks(await Promise.all(todoTasksList.map(async (task) => setCategoryAndPriorityNameForTask(task))));\r\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Loader {...pageStatus} />\r\n            <div className=\"form-group\">\r\n                <Link to=\"/todotasks/create/\" className=\"btn btn-dark\" role=\"button\">\r\n                    Create new task\r\n                </Link>\r\n            </div>\r\n            <br />\r\n            <h1>Todo Tasks</h1>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task Name</th>\r\n                        <th>Task Sort</th>\r\n                        <th>Task Category</th>\r\n                        <th>Task Priority</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {todoTasks.map((todoTask: ITodoTask) => (\r\n                        <RowDisplay todoTask={todoTask} key={todoTask.id} />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoTaskIndex;\r\n","import { useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst HomeIndex = () => {\r\n    const appState = useContext(AppContext);\r\n    return (\r\n        <>\r\n            {appState.token === null ? (\r\n                <>\r\n                    <h1>Hello!</h1>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h1>\r\n                        Hello, {appState.firstName  + \" \" +  appState.lastName }!\r\n                    </h1>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeIndex;\r\n","import { ILoginResponse } from './../types/ILoginResponse';\r\nimport Axios, { AxiosError } from 'axios';\r\nimport { ApiBaseUrl } from '../configuration';\r\nimport { IFetchResponse } from '../types/IFetchResponse';\r\nimport { IMessages } from '../types/IMessages';\r\n\r\nexport abstract class IdentityService {\r\n    protected static axios = Axios.create({\r\n        baseURL: ApiBaseUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });\r\n\r\n    static async Login(apiEndpoint: string, loginData: {email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\r\n        let loginDataJson = JSON.stringify(loginData);\r\n        try {\r\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            };    \r\n        }\r\n        catch (err) {\r\n            let error = err as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: error.response?.status ?? 500,\r\n                messages: (error.response?.data as IMessages).messages,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IdentityService } from \"../../services/identity-service\";\r\n\r\nconst Login = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [loginData, setLoginData] = useState({ email: \"string@string.com\", password: \"String2.\" });\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const logInClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (loginData.email === \"\" || loginData.password === \"\") {\r\n            setAlertMessage(\"Empty email or password!\");\r\n        }\r\n        setAlertMessage(\"\");\r\n        let response = await IdentityService.Login(\"Account/Login\", loginData);\r\n        if (!response.ok) {\r\n            setAlertMessage(response.messages![0]);\r\n        } else {\r\n            setAlertMessage(\"\");\r\n            appState.setAuthInfo(response.data!.token, response.data!.firstName, response.data!.lastName);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {appState.token !== null ? <Redirect to=\"/\" /> : null}\r\n            <form onSubmit={(e) => logInClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h4>Use a local account to log in</h4>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Email\">Email</label>\r\n                                <input\r\n                                    value={loginData.email}\r\n                                    onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    id=\"Input_Email\"\r\n                                    name=\"Input.Email\"\r\n                                    placeholder=\"user@example.com\"\r\n                                    autoComplete=\"username\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Password\">Password</label>\r\n                                <input\r\n                                    value={loginData.password}\r\n                                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    id=\"Input_Password\"\r\n                                    name=\"Input.Password\"\r\n                                    placeholder=\"Input your current password...\"\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => logInClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-dark\"\r\n                                >\r\n                                    Log in\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport Alert, { EAlertClass } from \"../../components/Alert\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IdentityService } from \"../../services/identity-service\";\r\n\r\nconst Register = () => {\r\n    const appState = useContext(AppContext);\r\n\r\n    const [loginData, setLoginData] = useState({ email: \"\", password: \"\" , firstName: \"\", lastName: \"\"});\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    const registerClicked = async (e: Event) => {\r\n        e.preventDefault();\r\n        if (loginData.email === \"\" || loginData.password === \"\") {\r\n            setAlertMessage(\"Empty email or password!\");\r\n        }\r\n        setAlertMessage(\"\");\r\n        let response = await IdentityService.Login(\"Account/Register\", loginData);\r\n        if (!response.ok) {\r\n            setAlertMessage(response.messages![0]);\r\n        } else {\r\n            setAlertMessage(\"\");\r\n            appState.setAuthInfo(response.data!.token, response.data!.firstName, response.data!.lastName);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {appState.token !== null ? <Redirect to=\"/\" /> : null}\r\n            <form onSubmit={(e) => registerClicked(e.nativeEvent)}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-1 col-md-3\"></div>\r\n                    <div className=\"col-sm-10 col-md-6\">\r\n                    <h4>Create a new account</h4>\r\n                        <section>\r\n                            <hr />\r\n                            <Alert show={alertMessage !== \"\"} message={alertMessage} alertClass={EAlertClass.Danger} />\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Email\">Email</label>\r\n                                <input\r\n                                    value={loginData.email}\r\n                                    onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    id=\"Input_Email\"\r\n                                    name=\"Input.Email\"\r\n                                    placeholder=\"user@example.com\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Password\">Password</label>\r\n                                <input\r\n                                    value={loginData.password}\r\n                                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    id=\"Input_Password\"\r\n                                    name=\"Input.Password\"\r\n                                    placeholder=\"password\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Firstname\">Firstname</label>\r\n                                <input\r\n                                    value={loginData.firstName}\r\n                                    onChange={(e) => setLoginData({ ...loginData, firstName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"firstname\"\r\n                                    id=\"Input_Firstname\"\r\n                                    name=\"Input.Firstname\"\r\n                                    placeholder=\"firstname\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"Input_Lastname\">Lastname</label>\r\n                                <input\r\n                                    value={loginData.lastName}\r\n                                    onChange={(e) => setLoginData({ ...loginData, lastName: e.target.value })}\r\n                                    className=\"form-control\"\r\n                                    type=\"lastname\"\r\n                                    id=\"Input_Lastname\"\r\n                                    name=\"Input.Lastname\"\r\n                                    placeholder=\"lastname\"\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    onClick={(e) => registerClicked(e.nativeEvent)}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-dark\"\r\n                                >\r\n                                    Register\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","const Page404 = () => {\r\n    return (\r\n        <div>Page not found - 404!</div>\r\n    );\r\n}\r\n\r\nexport default Page404;\r\n","import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nimport TodoCategoryCreate from './containers/todo-categories/TodoCategoryCreate';\nimport TodoCategoryDelete from './containers/todo-categories/TodoCategoryDelete';\nimport TodoCategoryDetails from './containers/todo-categories/TodoCategoryDetails';\nimport TodoCategoryEdit from './containers/todo-categories/TodoCategoryEdit';\nimport TodoCategoryIndex from './containers/todo-categories/TodoCategoryIndex';\n\nimport TodoPriorityCreate from './containers/todo-priorities/TodoPriorityCreate';\nimport TodoPriorityDelete from './containers/todo-priorities/TodoPriorityDelete';\nimport TodoPriorityDetails from './containers/todo-priorities/TodoPriorityDetails';\nimport TodoPriorityEdit from './containers/todo-priorities/TodoPriorityEdit';\nimport TodoPriorityIndex from './containers/todo-priorities/TodoPriorityIndex';\n\nimport TodoTaskCreate from './containers/todo-tasks/TodoTaskCreate';\nimport TodoTaskDelete from './containers/todo-tasks/TodoTaskDelete';\nimport TodoTaskDetails from './containers/todo-tasks/TodoTaskDetails';\nimport TodoTaskEdit from './containers/todo-tasks/TodoTaskEdit';\nimport TodoTaskIndex from './containers/todo-tasks/TodoTaskIndex';\n\nimport HomeIndex from './containers/home/HomeIndex';\nimport Login from './containers/identity/Login';\nimport Register from './containers/identity/Register';\nimport Page404 from './containers/Page404';\nimport { AppContextProvider, initialAppState } from './context/AppContext';\n\nfunction App() {\n    const setAuthInfo = (token: string | null, firstName: string, lastName: string): void => {\n        setAppState({...appState, token, firstName, lastName});\n    }\n\n    const [appState, setAppState] = useState({...initialAppState, setAuthInfo });\n\n    return (\n        <>\n            <AppContextProvider value={appState} >\n                \n                <Header />\n                <div className=\"container\">\n                    <main role=\"main\" className=\"pb-3\">\n                        <Switch>\n                            <Route exact path=\"/\" component={HomeIndex} />\n\n                            <Route path=\"/identity/login\" component={Login} />\n                            <Route path=\"/identity/register\" component={Register} />\n\n                            <Route path=\"/todocategories/create\" component={TodoCategoryCreate} />\n                            <Route path=\"/todocategories/edit/:id\" component={TodoCategoryEdit} />\n                            <Route path=\"/todocategories/delete/:id\" component={TodoCategoryDelete} />\n                            <Route path=\"/todocategories/:id\" component={TodoCategoryDetails} />\n                            <Route path=\"/todocategories\" component={TodoCategoryIndex} />\n\n                            <Route path=\"/todopriorities/create\" component={TodoPriorityCreate} />\n                            <Route path=\"/todopriorities/edit/:id\" component={TodoPriorityEdit} />\n                            <Route path=\"/todopriorities/delete/:id\" component={TodoPriorityDelete} />\n                            <Route path=\"/todopriorities/:id\" component={TodoPriorityDetails} />\n                            <Route path=\"/todopriorities\" component={TodoPriorityIndex} />\n\n                            <Route path=\"/todotasks/create\" component={TodoTaskCreate} />\n                            <Route path=\"/todotasks/edit/:id\" component={TodoTaskEdit} />\n                            <Route path=\"/todotasks/delete/:id\" component={TodoTaskDelete} />\n                            <Route path=\"/todotasks/:id\" component={TodoTaskDetails} />\n                            <Route path=\"/todotasks\" component={TodoTaskIndex} />\n\n                            <Route component={Page404} />\n                        </Switch>\n                    </main>\n                </div>\n                <Footer />\n            </AppContextProvider>\n        </>\n    );\n}\n\nexport default App;\n","import 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './assets/site.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}